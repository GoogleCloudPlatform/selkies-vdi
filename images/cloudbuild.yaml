# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 3600s
options:
  machineType: "N1_HIGHCPU_32"
  diskSizeGb: "512"

substitutions:
  _USE_CACHE: "true"
  _IMAGE_PREFIX: webrtc-gpu-streaming
  _IMAGE_TAG: latest

tags:
  - selkies-vdi-images

###
# Images to be pushed
###
images: [
    # gst-base
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-base:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-base:latest',
    # gst-webrtc-app
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-webrtc-app:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-webrtc-app:latest',
    # gst-web
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-web:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-web:latest',
    # signaling
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-signaling:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-signaling:latest',
    # desktop
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-desktop:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-desktop:latest',
    # xserver
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xserver:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xserver:latest',
    # pulseaudio
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-pulseaudio:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-pulseaudio:latest',
    # app-streaming
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app-streaming:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app-streaming:latest',
    # app-streaming:bionic
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app-streaming:bionic',
    # xpra
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xpra:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xpra:latest',
    # squid-proxy
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-squid-proxy:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-squid-proxy:latest',
    # tinyfilemanager
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-tinyfilemanager:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-tinyfilemanager:latest',
    # nvidia-gpu-device-plugin
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-nvidia-gpu-device-plugin:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-nvidia-gpu-device-plugin:latest',
    # uinput-device-plugin
    'gcr.io/${PROJECT_ID}/uinput-device-plugin:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/uinput-device-plugin:latest',
]

steps:
###
# Gstreamer base image
###
- name: 'gcr.io/cloud-builders/docker'
  id: gst-base-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-base:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: gst-base
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-base:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-base:latest',
            'gst-base'
        ]
  waitFor:
    - gst-base-pull
- name: 'gcr.io/cloud-builders/docker'
  id: gst-base-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-base:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-base:latest',
        ]
  waitFor:
    - gst-base

###
# WebRTC app image
###
- name: 'gcr.io/cloud-builders/docker'
  id: gst-webrtc-app-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-webrtc-app:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: gst-webrtc-app
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-webrtc-app:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-webrtc-app:latest',
            '--build-arg', 'BASE_IMAGE=gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-base:${_IMAGE_TAG}',
            'gst-webrtc-app'
        ]
  waitFor:
    - gst-webrtc-app-pull
    - gst-base
- name: 'gcr.io/cloud-builders/docker'
  id: gst-webrtc-app-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-webrtc-app:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-webrtc-app:latest',
        ]
  waitFor:
    - gst-webrtc-app

###
# WebRTC web app image
###
- name: 'gcr.io/cloud-builders/docker'
  id: gst-web-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-web:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: gst-web
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-web:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-web:latest',
            'gst-web'
        ]
  waitFor:
    - gst-web-pull
- name: 'gcr.io/cloud-builders/docker'
  id: gst-web-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-web:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-gst-web:latest',
        ]
  waitFor:
    - gst-web

###
# WebRTC signaling image
###
- name: 'gcr.io/cloud-builders/docker'
  id: signaling-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-signaling:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: signaling
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-signaling:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-signaling:latest',
            'signaling'
        ]
  waitFor:
    - signaling-pull
- name: 'gcr.io/cloud-builders/docker'
  id: signaling-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-signaling:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-signaling:latest',
        ]
  waitFor:
    - signaling

###
# Desktop image with debian Cloud Shell image as base.
###
- name: 'gcr.io/cloud-builders/docker'
  id: desktop-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-desktop:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: desktop
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-desktop:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-desktop:latest',
            'desktop'
        ]
  waitFor:
    - desktop-pull
- name: 'gcr.io/cloud-builders/docker'
  id: desktop-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-desktop:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-desktop:latest',
        ]
  waitFor:
    - desktop

###
# XServer image
###
- name: 'gcr.io/cloud-builders/docker'
  id: xserver-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xserver:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: xserver
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xserver:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xserver:latest',
            'xserver'
        ]
  waitFor:
    - xserver-pull
- name: 'gcr.io/cloud-builders/docker'
  id: xserver-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xserver:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xserver:latest',
        ]
  waitFor:
    - xserver

###
# Pulseaudio image
###
- name: 'gcr.io/cloud-builders/docker'
  id: pulseaudio-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-pulseaudio:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: pulseaudio
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-pulseaudio:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-pulseaudio:latest',
            'pulseaudio'
        ]
  waitFor:
    - pulseaudio-pull
- name: 'gcr.io/cloud-builders/docker'
  id: pulseaudio-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-pulseaudio:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-pulseaudio:latest',
        ]
  waitFor:
    - pulseaudio

###
# App streaming image based on Debian Buster (latest tag)
###
- name: 'gcr.io/cloud-builders/docker'
  id: app-streaming-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app-streaming:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: app-streaming
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app-streaming:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app-streaming:latest',
            'app-streaming'
        ]
  waitFor:
    - app-streaming-pull
- name: 'gcr.io/cloud-builders/docker'
  id: app-streaming-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app-streaming:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app-streaming:latest',
        ]
  waitFor:
    - app-streaming

###
# App streaming image based on Ubuntu Bionic (bionic tag)
###
- name: 'gcr.io/cloud-builders/docker'
  id: app-streaming-bionic-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app-streaming:bionic || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: app-streaming-bionic
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app-streaming:bionic',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app-streaming:bionic',
            '-f', 'app-streaming/Dockerfile.bionic',
            'app-streaming'
        ]
  waitFor:
    - app-streaming-bionic-pull

###
# Xpra image
###
- name: 'gcr.io/cloud-builders/docker'
  id: xpra-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xpra:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: xpra
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xpra:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xpra:latest',
            'xpra'
        ]
  waitFor:
    - xpra-pull
- name: 'gcr.io/cloud-builders/docker'
  id: xpra-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xpra:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-xpra:latest',
        ]
  waitFor:
    - xpra

###
# squid-proxy image
###
- name: 'gcr.io/cloud-builders/docker'
  id: squid-proxy-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-squid-proxy:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: squid-proxy
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-squid-proxy:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-squid-proxy:latest',
            'squid-proxy'
        ]
  waitFor:
    - squid-proxy-pull
- name: 'gcr.io/cloud-builders/docker'
  id: squid-proxy-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-squid-proxy:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-squid-proxy:latest',
        ]
  waitFor:
    - squid-proxy

###
# tinyfilemanager image
###
- name: 'gcr.io/cloud-builders/docker'
  id: tinyfilemanager-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-tinyfilemanager:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: tinyfilemanager
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-tinyfilemanager:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-tinyfilemanager:latest',
            'tinyfilemanager'
        ]
  waitFor:
    - tinyfilemanager-pull
- name: 'gcr.io/cloud-builders/docker'
  id: tinyfilemanager-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-tinyfilemanager:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-tinyfilemanager:latest',
        ]
  waitFor:
    - tinyfilemanager

###
# NVIDIA device plugin image
###
- name: 'gcr.io/cloud-builders/docker'
  id: nvidia-gpu-device-plugin-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-nvidia-gpu-device-plugin:latest || exit 0); fi"]
  waitFor: ["-"]
- name: gcr.io/cloud-builders/git
  id: nvidia-gpu-device-plugin-clone
  args: ['clone', 'https://github.com/danisla/container-engine-accelerators', '-b', 'add-modeset-device']
  waitFor:
    - nvidia-gpu-device-plugin-pull
- name: 'gcr.io/cloud-builders/docker'
  id: nvidia-gpu-device-plugin-build
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-nvidia-gpu-device-plugin:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-nvidia-gpu-device-plugin:latest',
            'container-engine-accelerators'
        ]
  waitFor:
    - nvidia-gpu-device-plugin-clone
- name: 'gcr.io/cloud-builders/docker'
  id: nvidia-gpu-device-plugin-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-nvidia-gpu-device-plugin:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-nvidia-gpu-device-plugin:latest',
        ]
  waitFor:
    - nvidia-gpu-device-plugin-build

###
# uinput device plugin image
###
- name: 'gcr.io/cloud-builders/docker'
  id: uinput-device-plugin-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/uinput-device-plugin:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: uinput-device-plugin
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/uinput-device-plugin:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/uinput-device-plugin:latest',
            'uinput-device-plugin'
        ]
  waitFor:
    - uinput-device-plugin-pull
- name: 'gcr.io/cloud-builders/docker'
  id: uinput-device-plugin-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/uinput-device-plugin:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/uinput-device-plugin:latest',
        ]
  waitFor:
    - uinput-device-plugin