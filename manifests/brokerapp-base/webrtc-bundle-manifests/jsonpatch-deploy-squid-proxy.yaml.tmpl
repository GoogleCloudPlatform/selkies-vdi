# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###
# Example BrokerAppConfig appParams when combined with egressCIDRRanges
###
#    appParams:
#      - name: enableSquidProxy
#        default: "true"
#      - name: egressCIDRRanges
#        default: "10.31.0.0/24"
#      - name: squidProxyWhitelist
#        default: ".turn.pod-broker-system.svc.cluster.local .ipinfo.io .google.com"

{{- $enableSquidProxy := false }}
{{- if .AppParams.enableSquidProxy }}
  {{- if eq .AppParams.enableSquidProxy "true" }}
    {{- $enableSquidProxy = true }}
  {{- end}}
{{- end}}

{{- $squidProxyImage := default (printf "gcr.io/%s/webrtc-gpu-streaming-squid-proxy:latest" .ProjectID) .AppParams.squidProxyImage }}

# Split allowed CIDR ranges
{{- $egressCIDRRanges := split "," (default "" .AppParams.egressCIDRRanges) }}

# Whitelist of sites to allow in addition to the URLs needed for the idle shutdown container to work.
{{- $squidProxyWhitelist := printf "%s .%s .turn.pod-broker-system.svc.cluster.local .istio-ingressgateway.istio-system.svc.cluster.local" .AppParams.squidProxyWhitelist .SysParams.Domain }}

{{- if $enableSquidProxy }}
###
# Add volume for squid conf
# Inserting as first element to deconflict other patches that append.
# See also: https://github.com/kubernetes-sigs/kustomize/issues/642
###
- op: add
  path: "/spec/template/spec/volumes/0"
  value:
    name: squid-conf
    configMap:
      name: {{.ServiceName}}-squid-conf

###
# Add Squid proxy container
###
- op: add
  path: "/spec/template/spec/containers/-"
  value:
    name: squid
    image: {{ $squidProxyImage }}
    command: ["/bin/bash"]
    args:
    - "-exc"
    - |-
      # Create squid.conf
      cat - > /apps/squid.conf.tproxy <<EOF
      # Quick shutdown
      shutdown_lifetime 0 seconds

      # Single log that we can tail to stdout
      logfile_rotate 0

      # Enable transpart proxy with SSL bump
      http_port 3128 intercept
      https_port 3129 intercept ssl-bump generate-host-certificates=on cert=/apps/CA_crt.pem key=/apps/CA_key.pem sslflags=DONT_VERIFY_PEER
      http_port 3130 ssl-bump generate-host-certificates=on cert=/apps/CA_crt.pem key=/apps/CA_key.pem sslflags=DONT_VERIFY_PEER

      # Run as specific user
      cache_effective_user proxy
      cache_effective_group proxy
      
      # Configure SSL Bump for all sites
      sslcrtd_program /apps/squid/libexec/ssl_crtd -s /apps/squid/var/lib/ssl_db -M 4MB sslcrtd_children 8 startup=1 idle=1  
      sslproxy_cert_error allow all
      
      {{- if .AppParams.squidProxyWhitelist }}
      # From: https://aws.amazon.com/blogs/security/how-to-add-dns-filtering-to-your-nat-instance-with-squid/
      acl SSL_port port 443
      http_access allow SSL_port
      acl step1 at_step SslBump1
      acl step2 at_step SslBump2
      acl step3 at_step SslBump3
      ssl_bump peek step1 all

      # Filter HTTP requests based on the whitelist
      acl allowed_http_sites dstdomain {{ $squidProxyWhitelist }}
      http_access allow allowed_http_sites

      # Filter HTTPS requests based on the whitelist
      acl allowed_https_sites ssl::server_name {{ $squidProxyWhitelist }}
      ssl_bump peek step2 allowed_https_sites
      ssl_bump splice step3 allowed_https_sites
      ssl_bump terminate step2 all

      ${SQUID_EXTRA_ACL}

      http_access deny all
      {{- else}}
      ssl_bump none localhost
      ssl_bump peek all
      ssl_bump splice all
      http_access allow all
      {{- end}}

      # Extra debugging
      #debug_options ALL,2 28,9

      # Example extra conf to send to upstream peer
      #never_direct allow all
      #cache_peer ${PROXY_CACHE_PEER} parent 3128 0 default

      ${SQUID_EXTRA_CONF}
      EOF

      # Send logs to stdout
      touch /apps/squid/var/logs/{cache,access}.log
      tail -vn 0 -F /apps/squid/var/logs/{cache,access}.log &

      chown proxy:proxy /apps/squid/var/logs -R
      chown proxy:proxy /apps/squid/var/lib/ssl_db -R

      # Start squid
      exec /apps/squid/sbin/squid -NsY -f /apps/squid.conf.tproxy
    env:
      - name: SQUID_EXTRA_CONF
        value: {{ default "" .AppParams.squidExtraConf | quote }}
      - name: SQUID_EXTRA_ACL
        value: {{ default "" .AppParams.squidExtraAcl | quote }}

###
# Add init container to redirect ports for transparent proxy
###
- op: add
  path: "/spec/template/spec/initContainers/-"
  value:
    name: squid-init
    image: {{ $squidProxyImage }}
    securityContext:
      privileged: true
    command: ["/bin/bash"]
    args:
      - "-exc"
      - |-
        {{- range $cidr := $egressCIDRRanges }}
        {{- if gt (len $cidr) 0 }}
        iptables -t nat -A OUTPUT -p tcp -m tcp --dport 80 -d {{$cidr}} -j ACCEPT
        iptables -t nat -A OUTPUT -p tcp -m tcp --dport 443 -d {{$cidr}} -j ACCEPT
        {{- end}}
        {{- end}}
        # Redirect all other traffic to transparent proxy.
        iptables -t nat -A OUTPUT -p tcp -m owner ! --uid-owner 13 --dport 80 -j REDIRECT --to-port 3128
        iptables -t nat -A OUTPUT -p tcp -m owner ! --uid-owner 13 --dport 443 -j REDIRECT --to-port 3129
{{- else}}
# Cannot have empty patch, so this is effectively a no-op.
- op: test
  path: /spec/template/spec/containers/0/name
  value: desktop
{{- end}}